"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import logging
from pathlib import Path

from rest_framework import ISO_8601

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

APP = "porsche"
VERSION = "1.0.0"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-vq(!affi377e+3)-dm5$h1mek#z12v&h+4lcr+3+0^2@!z2k4)"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    # "django.contrib.sessions",
    # "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    APP,
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    # "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    # "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "porsche.urls"

WSGI_APPLICATION = "porsche.wsgi.application"

AUTH_USER_MODEL = "porsche.User"

# 静态文件配置
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# 添加模板配置
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Rest framework
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
        # "rest_framework.parsers.FormParser",
        # "rest_framework.parsers.MultiPartParser",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # "rest_framework.authentication.SessionAuthentication",
        # "rest_framework.authentication.BasicAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
    "DEFAULT_THROTTLE_CLASSES": [],
    "DEFAULT_CONTENT_NEGOTIATION_CLASS": "rest_framework.negotiation.DefaultContentNegotiation",
    "DEFAULT_METADATA_CLASS": "rest_framework.metadata.SimpleMetadata",
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.QueryParameterVersioning",
    # Generic view behavior
    "DEFAULT_PAGINATION_CLASS": "porsche.core.restframework.pagination.PorschePageNumberPagination",
    "DEFAULT_FILTER_BACKENDS": [
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    # Schema
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.openapi.AutoSchema",
    # Throttling
    "DEFAULT_THROTTLE_RATES": {
        "user": None,
        "anon": None,
    },
    "NUM_PROXIES": None,
    # Pagination
    "PAGE_SIZE": 10,
    # Filtering
    "SEARCH_PARAM": "search",
    "ORDERING_PARAM": "ordering",
    # Versioning
    "DEFAULT_VERSION": "1",
    "ALLOWED_VERSIONS": ["1"],
    "VERSION_PARAM": "version",
    # Authentication\
    "UNAUTHENTICATED_USER": None,
    "UNAUTHENTICATED_TOKEN": None,
    # View configuration
    "VIEW_NAME_FUNCTION": "rest_framework.views.get_view_name",
    "VIEW_DESCRIPTION_FUNCTION": "rest_framework.views.get_view_description",
    # Exception handling
    "EXCEPTION_HANDLER": "porsche.core.restframework.views.exception_handler",
    "NON_FIELD_ERRORS_KEY": "non_field_errors",
    # Testing
    "TEST_REQUEST_RENDERER_CLASSES": [
        "rest_framework.renderers.MultiPartRenderer",
        "rest_framework.renderers.JSONRenderer",
    ],
    "TEST_REQUEST_DEFAULT_FORMAT": "multipart",
    # Hyperlink settings
    "URL_FORMAT_OVERRIDE": "format",
    "FORMAT_SUFFIX_KWARG": "format",
    "URL_FIELD_NAME": "url",
    # Input and output formats
    "DATE_FORMAT": ISO_8601,
    "DATE_INPUT_FORMATS": [ISO_8601],
    "DATETIME_FORMAT": ISO_8601,
    "DATETIME_INPUT_FORMATS": [ISO_8601],
    "TIME_FORMAT": ISO_8601,
    "TIME_INPUT_FORMATS": [ISO_8601],
    # Encoding
    "UNICODE_JSON": True,
    "COMPACT_JSON": True,
    "STRICT_JSON": True,
    "COERCE_DECIMAL_TO_STRING": True,
    "UPLOADED_FILES_USE_URL": True,
    # Browsable API
    "HTML_SELECT_CUTOFF": 1000,
    "HTML_SELECT_CUTOFF_TEXT": "More than {count} items...",
    # Schemas
    "SCHEMA_COERCE_PATH_PK": True,
    "SCHEMA_COERCE_METHOD_NAMES": {"retrieve": "read", "destroy": "delete"},
}

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": None,
    "sqlite": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": "sqlite3.db",
    },
    "postgres": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": APP,
        "DB": None,
        "USER": None,
        "PASSWORD": None,
        "HOST": None,
        "PORT": None,
        "CONN_HEALTH_CHECKS": True,
        "OPTIONS": {
            "pool": {
                "min_size": 4,
                "max_size": 20,
                "timeout": 30,
                "max_idle": 600,
                "num_workers": 2,
            },
        },
        "TEST": {
            "NAME": "test",
            "MIGRATE": True,
        },
    },
}
DATABASES["default"] = DATABASES["sqlite"]

REDIS_HOST = None
REDIS_PORT = None
REDIS_USER = None
REDIS_PASSWORD = None
REDIS_URL = f"{REDIS_USER}:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}"
REDIS_SAFE_URL = f"{REDIS_USER}@{REDIS_HOST}:{REDIS_PORT}"

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    },
    "redis": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "KEY_FUNCTION": "django.core.cache.backends.base.default_key_func",
        "KEY_PREFIX": APP,
        "TIMEOUT": 3600,
        "VERSION": 1,
        "LOCATION": f"redis://{REDIS_URL}",
        "OPTIONS": {
            "db": 1,
            "pool_class": "redis.BlockingConnectionPool",
        },
    },
    "django_redis": {
        "BACKEND": "django_redis.cache.RedisCache",
        "KEY_FUNCTION": "django.core.cache.backends.base.default_key_func",
        "KEY_PREFIX": APP,
        "TIMEOUT": 3600,
        "VERSION": 1,
        "LOCATION": f"redis://{REDIS_SAFE_URL}/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": f"{REDIS_PASSWORD}",
            "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
            "IGNORE_EXCEPTIONS": True,
            "CONNECTION_POOL_KWARGS": {
                "max_connections": 10,
                "retry_on_timeout": True,
            },
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
#     },
# ]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOG_LEVEL = logging.getLevelName(logging.INFO)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "verbose": {
            "format": "[%(levelname)s] %(asctime)s.%(msecs).3d %(filename)s(%(lineno)s) > %(funcName)s: %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "simple": {"format": "[%(levelname)s] %(asctime)s.%(msecs).3d: %(message)s", "datefmt": "%Y-%m-%d %H:%M:%S"},
        "console": {
            "format": "[%(levelname)s] %(asctime)s.%(msecs).3d %(name)s: %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "console",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": LOG_LEVEL,
    },
    "loggers": {
        "porsche": {
            "handlers": ["console"],
            "level": LOG_LEVEL,
            "propagate": False,
        },
        "django": {
            "handlers": ["console"],
            "level": LOG_LEVEL,
            "propagate": False,
        },
        "restframework": {
            "handlers": ["console"],
            "level": LOG_LEVEL,
            "propagate": False,
        },
    },
}

APPEND_SLASH = True

# HERE STARTS DYNACONF EXTENSION LOAD
import dynaconf

settings = dynaconf.DjangoDynaconf(
    __name__,
    envvar_prefix=APP,
    load_dotenv=True,
)
# HERE ENDS DYNACONF EXTENSION LOAD (No more code below this line)
